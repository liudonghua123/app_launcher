name: Build on Push to release

on:
  push:
    branches: 
      - master
    tags:
      - '*'

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macOS-latest]
        include:
          - os: ubuntu-latest
            output-name: ${GITHUB_REPOSITORY##*/}-linux
            package-name: ${GITHUB_REPOSITORY##*/}-linux
            config-name: resources/config-linux.yaml
          - os: macOS-latest
            output-name: ${GITHUB_REPOSITORY##*/}-mac
            package-name: ${GITHUB_REPOSITORY##*/}-mac
            config-name: resources/config-macos.yaml
          - os: windows-latest
            output-name: ${GITHUB_REPOSITORY##*/}-windows.exe
            package-name: ${GITHUB_REPOSITORY##*/}-windows
            config-name: resources/config-windows.yaml

    steps:
      - uses: actions/checkout@v1

      - name: Setup Dart VM
        uses: vanesyan/setup-dart@v1

      - name: Build for windows
        if: matrix.os == 'windows-latest'
        run: |
          pub.bat get
          dart.exe tool/grind.dart clean build
        shell: bash

      - name: Build for non-windows
        if: matrix.os != 'windows-latest'
        run: |
          pub get
          dart tool/grind.dart clean build
        shell: bash

      - name: Prepare release files
        run: |
          # clean up
          rm -rf ${{ matrix.package-name }}.zip ${GITHUB_REPOSITORY##*/}
          # create directory structure
          mkdir -p ${GITHUB_REPOSITORY##*/}/app/
          # copy resources
          cp build/* ${GITHUB_REPOSITORY##*/}/
          cp ${{ matrix.config-name }} ${GITHUB_REPOSITORY##*/}/config.yaml
          # use 7z to package the distribution
          7z a -tzip ${{ matrix.package-name }}.zip ${GITHUB_REPOSITORY##*/} -bb3
        shell: bash

      - uses: xresloader/upload-to-github-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          file: "*.zip"
          tags: true
          draft: false